// <auto-generated />
using System;
using ISP.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ISP.DAL.Migrations
{
    [DbContext(typeof(ISPContext))]
    partial class ISPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CentralProvider", b =>
                {
                    b.Property<int>("CentralsId")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersId")
                        .HasColumnType("int");

                    b.HasKey("CentralsId", "ProvidersId");

                    b.HasIndex("ProvidersId");

                    b.ToTable("CentralProvider");
                });

            modelBuilder.Entity("ISP.DAL.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("ClientSSn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientSSn");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("ISP.DAL.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Fax")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateCode")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mobile1")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Mobile2")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateCode");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.HasIndex("Mobile1", "Mobile2")
                        .IsUnique();

                    b.HasIndex("Phone1", "Phone2")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ISP.DAL.Central", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateCode");

                    b.ToTable("Centrals");
                });

            modelBuilder.Entity("ISP.DAL.Client", b =>
                {
                    b.Property<string>("SSn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Blocknum")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CentralId")
                        .HasColumnType("int");

                    b.Property<float>("ContractFee")
                        .HasColumnType("real");

                    b.Property<DateTime>("Contractdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisstrubtorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernarateCode")
                        .HasColumnType("int");

                    b.Property<int?>("IpPackage")
                        .HasColumnType("int");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<string>("LineOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mobile2")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderWorkNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Orderworkdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PortBlock")
                        .HasColumnType("int");

                    b.Property<int?>("PortSlot")
                        .HasColumnType("int");

                    b.Property<float>("PrePaid")
                        .HasColumnType("real");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("RouterSerial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Slotnum")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VCI")
                        .HasColumnType("int");

                    b.Property<int?>("VPI")
                        .HasColumnType("int");

                    b.Property<float>("installationFee")
                        .HasColumnType("real");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SSn");

                    b.HasIndex("BranchId");

                    b.HasIndex("CentralId");

                    b.HasIndex("DisstrubtorId");

                    b.HasIndex("GovernarateCode");

                    b.HasIndex("PackageId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.HasIndex("Mobile1", "Mobile2")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ISP.DAL.ClientOffers", b =>
                {
                    b.Property<string>("ClientSSn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("FreeMonthsLeft")
                        .HasColumnType("int");

                    b.Property<int>("MonthsLeft")
                        .HasColumnType("int");

                    b.Property<double>("RouterPrice")
                        .HasColumnType("float");

                    b.HasKey("ClientSSn", "OfferId");

                    b.HasIndex("ClientSSn")
                        .IsUnique();

                    b.HasIndex("OfferId");

                    b.ToTable("ClientOffers");
                });

            modelBuilder.Entity("ISP.DAL.Governorate", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Code");

                    b.HasAlternateKey("Name");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Code = 66,
                            Name = "cairo",
                            Status = true
                        });
                });

            modelBuilder.Entity("ISP.DAL.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CancelFine")
                        .HasColumnType("float");

                    b.Property<double>("DiscoutAmout")
                        .HasColumnType("float");

                    b.Property<double>("FineOfSuspensed")
                        .HasColumnType("float");

                    b.Property<bool>("HasRouter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentageDiscount")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPossibleToRasieOrLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTotalBill")
                        .HasColumnType("bit");

                    b.Property<bool>("Isfreefirst")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfFreeMonth")
                        .HasColumnType("int");

                    b.Property<int>("NumOfOfferMonth")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<double>("RouterPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ISP.DAL.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("purchasePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("ISP.DAL.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ISP.DAL.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0822972c-1dea-4ed0-9ffa-9b782504b89e",
                            Email = "reematman15@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "REEM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdiocrQ0YxmgnvKqUiZc0LWBt3JicuVrpelh8Pc/yrdEbEmhwntgxkBTuZUlOw5jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f9458fd-7fe8-4e4c-a4d6-885a87408727",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "Reem"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ISP.DAL.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            Status = true
                        });
                });

            modelBuilder.Entity("ISP.DAL.Data.Models.RoleClaims<string>", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.HasDiscriminator().HasValue("RoleClaims<string>");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Bill.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Bill.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Bill.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Bill.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Branch.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Branch.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Branch.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Branch.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Central.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Central.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Central.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Central.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Client.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Client.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Client.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Client.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Governorate.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Governorate.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Governorate.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Governorate.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Offer.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Offer.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Offer.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Offer.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Package.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Package.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Package.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Package.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Provider.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Provider.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Provider.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Provider.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Role.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Role.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Role.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.Role.Delete",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.User.View",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.User.Create",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.User.Edit",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permission",
                            ClaimValue = "Permission.User.Delete",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("CentralProvider", b =>
                {
                    b.HasOne("ISP.DAL.Central", null)
                        .WithMany()
                        .HasForeignKey("CentralsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.Provider", null)
                        .WithMany()
                        .HasForeignKey("ProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISP.DAL.Bill", b =>
                {
                    b.HasOne("ISP.DAL.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientSSn");

                    b.HasOne("ISP.DAL.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISP.DAL.Branch", b =>
                {
                    b.HasOne("ISP.DAL.Governorate", "Governorate")
                        .WithMany("Branches")
                        .HasForeignKey("GovernorateCode");

                    b.HasOne("ISP.DAL.User", "User")
                        .WithOne()
                        .HasForeignKey("ISP.DAL.Branch", "ManagerId");

                    b.Navigation("Governorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISP.DAL.Central", b =>
                {
                    b.HasOne("ISP.DAL.Governorate", "Governorate")
                        .WithMany("Centrals")
                        .HasForeignKey("GovernorateCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ISP.DAL.Client", b =>
                {
                    b.HasOne("ISP.DAL.Branch", "Branch")
                        .WithMany("Clients")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.Central", "Central")
                        .WithMany("Clients")
                        .HasForeignKey("CentralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.User", "Distributer")
                        .WithMany()
                        .HasForeignKey("DisstrubtorId");

                    b.HasOne("ISP.DAL.Governorate", "Governarate")
                        .WithMany("Clients")
                        .HasForeignKey("GovernarateCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.Package", "Package")
                        .WithMany("Clients")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.Provider", "Provider")
                        .WithMany("Clients")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Central");

                    b.Navigation("Distributer");

                    b.Navigation("Governarate");

                    b.Navigation("Package");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ISP.DAL.ClientOffers", b =>
                {
                    b.HasOne("ISP.DAL.Client", "Client")
                        .WithOne("ClientOffers")
                        .HasForeignKey("ISP.DAL.ClientOffers", "ClientSSn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("ISP.DAL.Offer", b =>
                {
                    b.HasOne("ISP.DAL.Provider", "Provider")
                        .WithMany("offers")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ISP.DAL.Package", b =>
                {
                    b.HasOne("ISP.DAL.Provider", "Provider")
                        .WithMany("Packages")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ISP.DAL.User", b =>
                {
                    b.HasOne("ISP.DAL.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ISP.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ISP.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISP.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ISP.DAL.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ISP.DAL.Branch", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Central", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Client", b =>
                {
                    b.Navigation("ClientOffers");
                });

            modelBuilder.Entity("ISP.DAL.Governorate", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Centrals");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Package", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ISP.DAL.Provider", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Packages");

                    b.Navigation("offers");
                });
#pragma warning restore 612, 618
        }
    }
}
